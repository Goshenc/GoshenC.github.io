<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Markdown语法</title>
      <link href="/2025/02/24/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2025/02/24/Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="一-标题"><a href="#一-标题" class="headerlink" title="一.标题"></a>一.标题</h1><p>使用#</p><h1 id="二-字体"><a href="#二-字体" class="headerlink" title="二.字体"></a>二.字体</h1><h2 id="1-粗体"><a href="#1-粗体" class="headerlink" title="1.粗体"></a>1.粗体</h2><p>两个*</p><p><strong>M</strong></p><p><strong>M</strong></p><h2 id="2-斜体"><a href="#2-斜体" class="headerlink" title="2.斜体"></a>2.斜体</h2><p>一个*</p><p><em>M</em></p><p><em>M</em></p><h2 id="3-粗体加斜体"><a href="#3-粗体加斜体" class="headerlink" title="3.粗体加斜体"></a>3.粗体加斜体</h2><p>三个*</p><p><em><strong>M</strong></em></p><p><em><strong>M</strong></em></p><h2 id="4-删除"><a href="#4-删除" class="headerlink" title="4.删除"></a>4.删除</h2><p>使用两个波浪线</p><p><del>M</del></p><p><del>M</del></p><h1 id="三-引用"><a href="#三-引用" class="headerlink" title="三.引用"></a>三.引用</h1><p>使用大于号</p><blockquote><p>M</p></blockquote><blockquote><p>M</p></blockquote><h1 id="四-分割线"><a href="#四-分割线" class="headerlink" title="四.分割线"></a>四.分割线</h1><p>三个*或者三个-</p><h1 id="五-图片"><a href="#五-图片" class="headerlink" title="五.图片"></a>五.图片</h1><p>!+[]+()，其中[]内填写名字，()内填写图片地址</p><p><img src="/"></p><h1 id="六-超链接"><a href="#六-超链接" class="headerlink" title="六.超链接"></a>六.超链接</h1><p>[]+()，其中[]内填写名字，()内填写网址</p><p><a href="www.baidu.com">hh</a></p><h1 id="七-列表"><a href="#七-列表" class="headerlink" title="七.列表"></a>七.列表</h1><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>数字加”.”,再加空格，即生成有序列表</p><ol><li>A</li><li>B</li></ol><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>-加空格</p><ul><li>1</li><li>2</li></ul><h1 id="八-表格"><a href="#八-表格" class="headerlink" title="八.表格"></a>八.表格</h1><p>1.右键，选择插入，选择表格</p><p>2.Ctrl+T</p><p>3.原始人模式</p><p>先写好格式如下</p><p>X|Y|Z</p><p>–|–|–</p><p>1|2|3</p><p>然后点击左下角图案&lt;&#x2F;&gt;，开启源代码模式，把各行之间的空行删除，即可生成表格。</p><h1 id="九-插入代码块"><a href="#九-插入代码块" class="headerlink" title="九.插入代码块"></a>九.插入代码块</h1><p>使用三个&#96;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL数据库</title>
      <link href="/2025/02/24/SQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2025/02/24/SQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>进度1:04:06</p><h1 id="一-数据类型"><a href="#一-数据类型" class="headerlink" title="一.数据类型"></a>一.数据类型</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INT                    --整数</span><br><span class="line">DECIMAL(3,2)   --有小数点的数</span><br><span class="line">VARCHAR(10)            --字串</span><br><span class="line">BLOB                   --(Binary Large Object) 图片 影片 档案...</span><br><span class="line">DATA                   --&#x27;YYYY-MM-DD&#x27; 日期</span><br><span class="line">TIMESTAMP              --&#x27;YYYY-MM-DD HH:MM:SS&#x27; 记录时间</span><br></pre></td></tr></table></figure><h1 id="二-简单例子"><a href="#二-简单例子" class="headerlink" title="二.简单例子"></a>二.简单例子</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> dATABASE `sql_tutorial`;</span><br><span class="line"><span class="keyword">SHOW</span> DAtABaSES;</span><br><span class="line">USE `sql_tutorial`;</span><br><span class="line"><span class="keyword">CREATE TABLE</span> `student`(</span><br><span class="line">`student_id` <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">20</span>),  <span class="comment">-- 这是一个注释，记得是减减加空格</span></span><br><span class="line">`major` <span class="type">VARCHAR</span>(<span class="number">20</span>)  <span class="comment">-- 最后一个属性不用加逗号</span></span><br><span class="line">);      <span class="comment">/*最后有;*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">dESCriBe</span> `student`;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">TABLE</span> `student`;</span><br><span class="line"><span class="keyword">ALTER TABLE</span> `student` <span class="keyword">ADD</span> gpa <span class="type">DECIMAL</span>(<span class="number">3</span>,<span class="number">2</span>); <span class="comment">-- 新增属性</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> `student` <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> gpa; <span class="comment">-- 删除属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student`;</span><br><span class="line"><span class="keyword">INSERT INTO</span> `student` <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;小白&#x27;</span>,<span class="string">&#x27;历史&#x27;</span>); <span class="comment">-- 插入数据，注意是用单引号’而不是`</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> `student` <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;小黑&#x27;</span>,<span class="string">&#x27;生物&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT INTO</span> `student` <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;小绿&#x27;</span>,<span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT INTO</span> `student`(`name`,`major`,`student_id`) <span class="keyword">VALUES</span>(<span class="string">&#x27;小蓝&#x27;</span>,<span class="string">&#x27;英语&#x27;</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>1.注释有– 和&#x2F;**&#x2F;两种</p><p>2.一个引号是一句，比如虽然CREATE TABLE <code>student</code> 有那么多行，其实只有一句，所以cursor指向容易一行就可以执行整个语句</p><p>3.闪电只会闪电一句话，比如你没有执行USE sql_tutorial 这一句话，去执行CREATE TABLE student就会报错</p><p>4.关键字的大小写是无所谓的，但建议关键字全用大写，上面例子只是为了体现大小写任意的特征，实际上一个全部大写，自己定义的字建议使用&#96;&#96;包括起来，并使用小写</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用AS的准备</title>
      <link href="/2025/02/16/%E4%BD%BF%E7%94%A8AS%E7%9A%84%E5%87%86%E5%A4%87/"/>
      <url>/2025/02/16/%E4%BD%BF%E7%94%A8AS%E7%9A%84%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h1 id="1-viewbinding"><a href="#1-viewbinding" class="headerlink" title="1.viewbinding"></a>1.viewbinding</h1><p>build.gradle.kts中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">...</span><br><span class="line">buildFeatures &#123;</span><br><span class="line">    viewBinding = true</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-compileSdk"><a href="#2-compileSdk" class="headerlink" title="2.compileSdk"></a>2.compileSdk</h1><p>build.gradle.kts中compileSdk&#x3D;34改成compileSdk&#x3D;35</p><h1 id="3-dependencies"><a href="#3-dependencies" class="headerlink" title="3.dependencies"></a>3.dependencies</h1><p>在dependencies中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">implementation(&quot;androidx.fragment:fragment:1.6.2&quot;)</span><br><span class="line">implementation(&quot;com.squareup.okhttp3:okhttp:4.10.0&quot;)</span><br><span class="line">implementation(&quot;com.google.code.gson:gson:2.10.1&quot;)</span><br><span class="line">implementation(&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;)</span><br><span class="line">implementation(&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;)</span><br><span class="line">implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1&quot;)</span><br><span class="line">implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.1&quot;)</span><br><span class="line">implementation(&quot;androidx.lifecycle:lifecycle-runtime-ktx:2.4.0&quot;)</span><br><span class="line">implementation(&quot;androidx.lifecycle:lifecycle-livedata-ktx:2.8.7&quot;)</span><br><span class="line">implementation(&quot;androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.0&quot;)</span><br><span class="line">implementation(&quot;androidx.room:room-runtime:2.6.1&quot;)</span><br><span class="line">kapt(&quot;androidx.room:room-compiler:2.6.1&quot;)</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>解释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">implementation(&quot;androidx.fragment:fragment-ktx:1.6.2&quot;)</span><br><span class="line">implementation(&quot;com.squareup.okhttp3:okhttp:4.10.0&quot;)//引用OkHttp库</span><br><span class="line">implementation(&quot;com.google.code.gson:gson:2.10.1&quot;)//使用gson</span><br><span class="line">implementation(&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;)//使用Retrofit,会自动将Retrofit、OkHttp、和Okio这几个库一起下载，不用再手动引入OkHttp库。</span><br><span class="line">implementation(&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;)//使用Retrofit，这是一个Retrofit的转换库，它是借助GSON来解析JSON数据的，所以会自动将GSON库下载下来，所以不用手动引入GSON库了</span><br><span class="line">implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1&quot;)//协程</span><br><span class="line">implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.1&quot;)//协程</span><br><span class="line">implementation(&quot;androidx.lifecycle:lifecycle-runtime-ktx:2.4.0&quot;)//使用ViewModel组件</span><br><span class="line">implementation(&quot;androidx.lifecycle:lifecycle-livedata-ktx:2.8.7&quot;)//使用ViewModel、livedata组件</span><br><span class="line">implementation(&quot;androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.0&quot;)//使用ViewModel组件</span><br><span class="line">implementation(&quot;androidx.room:room-runtime:2.6.1&quot;)//room</span><br><span class="line">kapt(&quot;androidx.room:room-compiler:2.6.1&quot;)//room</span><br></pre></td></tr></table></figure><h1 id="4-plugins"><a href="#4-plugins" class="headerlink" title="4.plugins"></a>4.plugins</h1><p>添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id(&quot;kotlin-kapt&quot;)</span><br></pre></td></tr></table></figure><p>解释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id(&quot;kotlin-kapt&quot;)//为了dependencies中能使用kapt(&quot;...&quot;)这样的语法</span><br></pre></td></tr></table></figure><h1 id="5-binding"><a href="#5-binding" class="headerlink" title="5.binding"></a>5.binding</h1><p>改用binding.root</p><h1 id="6-声明网络权限"><a href="#6-声明网络权限" class="headerlink" title="6.声明网络权限"></a>6.声明网络权限</h1><p>在AndroidManifest.xml开头添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>如下面例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;</span><br><span class="line">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</span><br></pre></td></tr></table></figure><h1 id="7-使用HTTP"><a href="#7-使用HTTP" class="headerlink" title="7.使用HTTP"></a>7.使用HTTP</h1><p>在res-&gt;xml文件夹下，新建network_config.xml文件，然后修改文件中内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span><br><span class="line">&lt;network-security-config&gt;</span><br><span class="line">    &lt;base-config cleartextTrafficPermitted=&quot;true&quot;&gt;</span><br><span class="line">        &lt;trust-anchors&gt;</span><br><span class="line">            &lt;certificates src=&quot;system&quot;/&gt;</span><br><span class="line">        &lt;/trust-anchors&gt;</span><br><span class="line">    &lt;/base-config&gt;</span><br><span class="line">&lt;/network-security-config&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段配置文件的意思是允许我们以明文的方式在网络上传输数据，而HTTP使用的就是明文传输方式。</p><p>接下来修改AndroidManifest.xml中的代码来启用我们刚才创建的配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;application</span><br><span class="line">        android:allowBackup=&quot;true&quot;</span><br><span class="line">        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;</span><br><span class="line">        android:fullBackupContent=&quot;@xml/backup_rules&quot;</span><br><span class="line">        android:icon=&quot;@mipmap/ic_launcher&quot;</span><br><span class="line">        android:label=&quot;@string/app_name&quot;</span><br><span class="line">        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;</span><br><span class="line">        android:supportsRtl=&quot;true&quot;</span><br><span class="line">        android:theme=&quot;@style/Theme.NetworkTest&quot;</span><br><span class="line">        tools:targetApi=&quot;31&quot;</span><br><span class="line">        android:networkSecurityConfig=&quot;@xml/network_config&quot;//就是添加这一行哦</span><br><span class="line">        &gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Task-4</title>
      <link href="/2025/02/10/Task-4/"/>
      <url>/2025/02/10/Task-4/</url>
      
        <content type="html"><![CDATA[<h1 id="寒假第四讲"><a href="#寒假第四讲" class="headerlink" title="寒假第四讲"></a>寒假第四讲</h1><h2 id="一-有理数取余"><a href="#一-有理数取余" class="headerlink" title="一.有理数取余"></a>一.有理数取余</h2><h3 id="1-对应思路"><a href="#1-对应思路" class="headerlink" title="1.对应思路"></a>1.对应思路</h3><p>该问题要求计算有理数 c&#x3D;ab<em>c</em>&#x3D;<em>b**a</em> 对19260817取模的值。根据模运算的性质，这相当于求解方程 bx≡amod  19260817<em>b**x</em>≡<em>a</em>mod19260817。解的存在性取决于 b<em>b</em> 是否存在模19260817的逆元。具体步骤如下：</p><ol><li><strong>大数取模</strong>：由于输入的 a<em>a</em> 和 b<em>b</em> 可能非常大（最多10001位），需要将这两个数转换为模19260817后的值。这可以通过逐位处理字符串并取模来实现。</li><li><strong>判断逆元存在性</strong>：若 b<em>b</em> 模19260817的结果为0，则方程无解，直接输出“Angry!”。否则，利用费马小定理计算 b<em>b</em> 的逆元，因为19260817是质数。</li><li><strong>计算最终结果</strong>：将 a<em>a</em> 的模值与逆元相乘后再次取模，得到最终结果。</li></ol><h3 id="2-对应代码"><a href="#2-对应代码" class="headerlink" title="2.对应代码"></a>2.对应代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int MOD = 19260817;</span><br><span class="line"></span><br><span class="line">int mod(const string&amp; s, int m) &#123;</span><br><span class="line">    int res = 0;</span><br><span class="line">    for (char c : s) &#123;</span><br><span class="line">        res = (res * 10LL + (c - &#x27;0&#x27;)) % m;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">long long pow_mod(long long a, long long b, int mod) &#123;</span><br><span class="line">    long long res = 1;</span><br><span class="line">    a %= mod;</span><br><span class="line">    while (b &gt; 0) &#123;</span><br><span class="line">        if (b % 2 == 1) res = (res * a) % mod;</span><br><span class="line">        a = (a * a) % mod;</span><br><span class="line">        b /= 2;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    string a_str, b_str;</span><br><span class="line">    cin &gt;&gt; a_str &gt;&gt; b_str;</span><br><span class="line"></span><br><span class="line">    int a_mod = mod(a_str, MOD);</span><br><span class="line">    int b_mod = mod(b_str, MOD);</span><br><span class="line"></span><br><span class="line">    if (b_mod == 0) &#123;</span><br><span class="line">        cout &lt;&lt; &quot;Angry!&quot; &lt;&lt; endl;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        long long inv_b = pow_mod(b_mod, MOD - 2, MOD);</span><br><span class="line">        long long ans = (a_mod * inv_b) % MOD;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-学习总结"><a href="#3-学习总结" class="headerlink" title="3.学习总结"></a>3.学习总结</h3><ol><li><strong>大数取模技巧</strong>：处理超大数时，可以通过逐位取模的方式避免数值溢出。例如，将字符串的每一位依次转换为当前结果的10倍加上该位数字，然后立即取模。</li><li><strong>逆元计算</strong>：当模数为质数时，可以利用费马小定理快速计算逆元（即 ap−2mod  p<em>a**p</em>−2mod<em>p</em>），时间复杂度为 O(log⁡p)<em>O</em>(log<em>p</em>)。</li><li><strong>输入处理</strong>：注意输入的数值范围，使用字符串处理大数，并确保处理过程中不会溢出。</li><li><strong>边界条件</strong>：题目保证输入的 a<em>a</em> 和 b<em>b</em> 不同时是模数的倍数，因此当 b<em>b</em> 的模为0时，直接判定无解。</li></ol><p>该问题结合了数论中的模运算和逆元知识，同时考察了处理大数的技巧，综合应用了多种算法和编程技术。</p><h2 id="二-Minimal-Coprime"><a href="#二-Minimal-Coprime" class="headerlink" title="二.Minimal Coprime"></a>二.Minimal Coprime</h2><h3 id="1-对应思路-1"><a href="#1-对应思路-1" class="headerlink" title="1.对应思路"></a>1.对应思路</h3><p>对于每一个测试用例，我们需要找出区间 [l, r] 内所有的最小互质区间。由于我们要判断区间是否是最小互质，实际操作时可以考虑以下几点：</p><ol><li>如果 l &#x3D;&#x3D; r，那么只有一个单一的数，需要检查该数是否与自身互质，显然，对于任意数 a，<code>gcd(a, a) ≠ 1</code>，因此这类区间无法构成互质区间。</li><li>如果 l !&#x3D; r，则要判断区间 [l, r] 内每一个单元素子区间是否互质，同时对于更大的区间是否是最小互质区间。</li></ol><h3 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define int long long</span><br><span class="line">#define endl &#x27;\n&#x27;</span><br><span class="line">const int N = 1e6 + 10,mod = 19260817,INT = 1e17,M = 5e6;</span><br><span class="line"> </span><br><span class="line">typedef pair&lt;int,int&gt; PII;</span><br><span class="line"> </span><br><span class="line">int qmi(int a,int k)&#123;</span><br><span class="line">int res = 1;</span><br><span class="line">while(k)&#123;</span><br><span class="line">if(k&amp;1) res = res * a % mod;</span><br><span class="line">a = a * a % mod; </span><br><span class="line">k &gt;&gt;= 1;</span><br><span class="line">&#125;</span><br><span class="line">return res;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void slove()&#123;</span><br><span class="line">string a,b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">int na = 0,nb = 0;</span><br><span class="line">for(auto c:a)&#123;</span><br><span class="line">na = (na * 10 + c - &#x27;0&#x27;) % mod;</span><br><span class="line">&#125;</span><br><span class="line">for(auto c:b) nb = (nb * 10 + c - &#x27;0&#x27;) % mod;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; na * qmi(nb,mod - 2) % mod &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">signed main()</span><br><span class="line">&#123;</span><br><span class="line">ios::sync_with_stdio(false);cin.tie(nullptr);</span><br><span class="line">int T = 1;</span><br><span class="line">while(T--) slove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-学习总结-1"><a href="#3-学习总结-1" class="headerlink" title="3.学习总结"></a>3.学习总结</h3><p><strong>最大公约数 (gcd)</strong>：在这道题中，我们频繁使用 <code>gcd</code> 来判断两个数是否互质。通过辗转相除法，可以有效地求出两个数的最大公约数，进而判断它们是否互质。</p><p><strong>区间内互质判断</strong>：对于每一个子区间，需要检查它们是否互质，并且判断是否包含更小的互质子区间。这要求我们在求解时要小心处理每个区间，避免遗漏。</p><p><strong>最小互质区间的判定</strong>：最小互质区间需要满足不包含任何其他互质区间，这一点是解题的关键。通过遍历区间的所有子区间，并确保它们不含更小的互质区间，可以确保找到所有最小互质区间。</p><p><strong>优化</strong>：虽然本解法直接暴力枚举所有区间，但考虑到题目中区间范围较大，应该在实际使用中进行一些优化，如剪枝等策略。</p>]]></content>
      
      
      
        <tags>
            
            <tag> practice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Task 3</title>
      <link href="/2025/02/06/Task-3/"/>
      <url>/2025/02/06/Task-3/</url>
      
        <content type="html"><![CDATA[<h1 id="寒假第三讲"><a href="#寒假第三讲" class="headerlink" title="寒假第三讲"></a>寒假第三讲</h1><h2 id="一-priority-queue"><a href="#一-priority-queue" class="headerlink" title="一.priority queue"></a>一.priority queue</h2><h3 id="1-对应思路"><a href="#1-对应思路" class="headerlink" title="1.对应思路"></a>1.对应思路</h3><p>题目要求实现一个优先队列，支持插入操作 <code>insert(k)</code> 和提取最大元素操作 <code>extractMax</code>。在 C++ 中，我们可以使用 <code>priority_queue</code> 来实现这一结构。<code>priority_queue</code> 默认是最大堆，插入操作将元素添加到堆中，而提取操作返回并删除堆顶的元素。</p><p>首先，输入包含多个操作，每个操作可能是 <code>insert k</code>（插入整数 k）、<code>extract</code>（提取最大元素）或 <code>end</code>（结束输入）。对于每个 <code>insert k</code> 操作，我们将元素插入到优先队列中。对于每个 <code>extract</code> 操作，我们从堆中提取并输出当前最大值。</p><p>C++ 的 <code>priority_queue</code> 数据结构默认按降序排列（即最大堆），因此无需额外处理即可满足题目要求。程序通过循环读取操作，针对 <code>insert</code> 进行堆插入，针对 <code>extract</code> 进行堆顶元素提取并输出，直到遇到 <code>end</code> 操作停止。</p><h3 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;sstream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">struct Compare &#123;</span><br><span class="line">    bool operator()(int a, int b) &#123;</span><br><span class="line">        return a &lt; b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    priority_queue&lt;int, vector&lt;int&gt;, Compare&gt; pq; </span><br><span class="line">    string line;</span><br><span class="line"></span><br><span class="line">    while (getline(cin, line)) &#123;</span><br><span class="line">        if (line.empty()) continue;</span><br><span class="line"></span><br><span class="line">        stringstream ss(line);</span><br><span class="line">        string command;</span><br><span class="line">        ss &gt;&gt; command;</span><br><span class="line"></span><br><span class="line">        if (command == &quot;insert&quot;) &#123;</span><br><span class="line">            int k;</span><br><span class="line">            ss &gt;&gt; k;</span><br><span class="line">            pq.push(k);</span><br><span class="line">        &#125; else if (command == &quot;extract&quot;) &#123;</span><br><span class="line">            if (!pq.empty()) &#123;</span><br><span class="line">                cout &lt;&lt; pq.top() &lt;&lt; endl; </span><br><span class="line">                pq.pop(); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (command == &quot;end&quot;) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h3 id="3-学习总结"><a href="#3-学习总结" class="headerlink" title="3.学习总结"></a>3.学习总结</h3><p>通过实现这个优先队列，了解了 C++ 中 <code>priority_queue</code> 的基本使用方法。<code>priority_queue</code> 使用最大堆结构，自动保证每次提取的都是当前最大元素，因此插入和提取操作的时间复杂度为 <code>O(log n)</code>，非常高效。此外，使用 <code>priority_queue</code> 还可以避免手动维护堆结构，从而减少了程序复杂度。通过输入和输出流的处理，我也更深入地理解了如何高效处理大规模数据输入。特别是对于题目中限制的 200 万次操作，我们需要确保程序的输入输出效率，因此应该尽量减少不必要的操作，使用合适的输入输出方法提高程序性能。</p><h2 id="ST表-RMQ问题"><a href="#ST表-RMQ问题" class="headerlink" title="ST表&amp;&amp;RMQ问题"></a>ST表&amp;&amp;RMQ问题</h2><h3 id="1-对应思路-1"><a href="#1-对应思路-1" class="headerlink" title="1.对应思路"></a>1.对应思路</h3><p>该程序利用 ST 表进行静态区间最大值查询。首先，使用 <code>preprocess</code> 函数构建 ST 表，预处理时间复杂度为 O(N log N)。<br>对于每个查询，我们利用对数表 <code>log_table</code> 预计算查询范围的最优分块，使得查询复杂度降为 O(1)。<br>通过 <code>read()</code> 进行高效输入，减少 IO 时间，适用于大数据量场景。</p><h3 id="2-代码-1"><a href="#2-代码-1" class="headerlink" title="2.代码"></a>2.代码</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int MAX_N = 100000;</span><br><span class="line">const int LOG = 17;</span><br><span class="line">int st[MAX_N][LOG];</span><br><span class="line">int log_table[MAX_N + 1];</span><br><span class="line"></span><br><span class="line">inline int read() &#123;</span><br><span class="line">    int x = 0, f = 1;</span><br><span class="line">    char ch = getchar();</span><br><span class="line">    while (ch &lt; &#x27;0&#x27; || ch &gt; &#x27;9&#x27;) &#123;</span><br><span class="line">        if (ch == &#x27;-&#x27;) f = -1;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    while (ch &gt;= &#x27;0&#x27; &amp;&amp; ch &lt;= &#x27;9&#x27;) &#123;</span><br><span class="line">        x = x * 10 + ch - &#x27;0&#x27;;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    return x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void preprocess(const vector&lt;int&gt;&amp; arr, int n) &#123;</span><br><span class="line">    for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        st[i][0] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    for (int j = 1; (1 &lt;&lt; j) &lt;= n; j++) &#123;</span><br><span class="line">        for (int i = 0; i + (1 &lt;&lt; j) - 1 &lt; n; i++) &#123;</span><br><span class="line">            st[i][j] = max(st[i][j - 1], st[i + (1 &lt;&lt; (j - 1))][j - 1]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    log_table[1] = 0;</span><br><span class="line">    for (int i = 2; i &lt;= n; i++) &#123;</span><br><span class="line">        log_table[i] = log_table[i / 2] + 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int query(int l, int r) &#123;</span><br><span class="line">    int j = log_table[r - l + 1];</span><br><span class="line">    return max(st[l][j], st[r - (1 &lt;&lt; j) + 1][j]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int n = read(), m = read();</span><br><span class="line">    vector&lt;int&gt; arr(n);</span><br><span class="line">    for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        arr[i] = read();</span><br><span class="line">    &#125;</span><br><span class="line">    preprocess(arr, n);</span><br><span class="line">    while (m--) &#123;</span><br><span class="line">        int l = read() - 1, r = read() - 1;</span><br><span class="line">        printf(&quot;%d\n&quot;, query(l, r));</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h3 id="3-学习总结-1"><a href="#3-学习总结-1" class="headerlink" title="3.学习总结"></a>3.学习总结</h3><ol><li>ST 表适用于静态查询，预处理代价较高，但查询极快。</li><li>利用 <code>log_table</code> 预计算对数值可以减少 <code>log</code> 函数调用，提高查询效率。</li><li>快速输入 <code>read()</code> 可有效减少时间开销，适用于高强度数据。</li><li>ST 表的核心思想是利用区间的重叠性，通过 <code>dp</code> 方式高效存储区间信息</li></ol><h2 id="合并果子"><a href="#合并果子" class="headerlink" title="合并果子"></a>合并果子</h2><h3 id="1-对应思路-2"><a href="#1-对应思路-2" class="headerlink" title="1.对应思路"></a>1.对应思路</h3><p>本题可以通过哈夫曼树（Huffman Tree）的思想来解决，使用最小堆（优先队列）进行贪心合并。<br>每次取出当前最小的两堆果子进行合并，合并的代价是两者之和，并将新堆重新加入优先队列。<br>这个过程持续 n-1 次，最终优先队列中只剩下一堆，累加所有合并的代价，即为最小的体力耗费。<br>由于使用了最小堆，每次插入与删除的复杂度是 O(log n)，整体复杂度为 O(n log n)。</p><h3 id="2-代码-2"><a href="#2-代码-2" class="headerlink" title="2.代码"></a>2.代码</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">inline int read() &#123;</span><br><span class="line">    int x = 0, f = 1;</span><br><span class="line">    char ch = getchar();</span><br><span class="line">    while (ch &lt; &#x27;0&#x27; || ch &gt; &#x27;9&#x27;) &#123;</span><br><span class="line">        if (ch == &#x27;-&#x27;) f = -1;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    while (ch &gt;= &#x27;0&#x27; &amp;&amp; ch &lt;= &#x27;9&#x27;) &#123;</span><br><span class="line">        x = x * 10 + ch - &#x27;0&#x27;;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    return x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int n = read();</span><br><span class="line">    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; pq;</span><br><span class="line">    for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        pq.push(read());</span><br><span class="line">    &#125;</span><br><span class="line">    int total_cost = 0;</span><br><span class="line">    while (pq.size() &gt; 1) &#123;</span><br><span class="line">        int a = pq.top(); pq.pop();</span><br><span class="line">        int b = pq.top(); pq.pop();</span><br><span class="line">        int cost = a + b;</span><br><span class="line">        total_cost += cost;</span><br><span class="line">        pq.push(cost);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;, total_cost);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="3-学习总结-2"><a href="#3-学习总结-2" class="headerlink" title="3.学习总结"></a>3.学习总结</h3><ol><li>本题是典型的贪心算法应用，通过局部最优（每次合并最小的两堆）达到全局最优。</li><li>最小堆（优先队列）是一种有效的数据结构，适用于处理动态集合中的最小值问题。</li><li>哈夫曼树的构造与本题类似，它用于最优前缀编码问题，具有广泛应用。</li><li>由于 n 最大为 10000，使用 O(n log n) 复杂度的方法是合理可行的，若用 O(n^2) 的方法会超时。</li><li>通过 <code>priority_queue</code> 的 <code>greater&lt;int&gt;</code> 实现最小堆，提高代码可读性和效率。</li></ol><h2 id="四-约瑟夫问题"><a href="#四-约瑟夫问题" class="headerlink" title="四.约瑟夫问题"></a>四.约瑟夫问题</h2><h3 id="1-对应思路-3"><a href="#1-对应思路-3" class="headerlink" title="1.对应思路"></a>1.对应思路</h3><p>该题是经典的约瑟夫环问题。我们通过模拟报数过程来解决，使用双端队列（<code>deque</code>）来模拟每次出圈的操作。首先将所有人的编号依次加入队列，每次将前 mmm 个人报数，第 mmm 个人出列，再从下一个人开始继续报数。该过程重复直到所有人都出列。通过队列的 <code>push_back</code> 和 <code>pop_front</code> 操作来模拟循环报数，保证每个出圈人的编号按顺序输出。</p><h3 id="2-代码-3"><a href="#2-代码-3" class="headerlink" title="2.代码"></a>2.代码</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;deque&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    deque&lt;int&gt; people;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    for (int i = 1; i &lt;= n; i++) &#123;</span><br><span class="line">        people.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    while (!people.empty()) &#123;</span><br><span class="line">        </span><br><span class="line">        for (int i = 1; i &lt; m; i++) &#123;</span><br><span class="line">            people.push_back(people.front());</span><br><span class="line">            people.pop_front();</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        cout &lt;&lt; people.front() &lt;&lt; &quot; &quot;;</span><br><span class="line">        people.pop_front();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h3 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h3><p><strong>约瑟夫环问题</strong>：是经典的动态结构问题，使用队列模拟能够有效解决。</p><p><strong>队列操作</strong>：队列的 <code>push_back</code> 和 <code>pop_front</code> 操作时间复杂度为 O(1)，适合进行循环模拟。</p><p><strong>循环过程理解</strong>：通过理解每次从队列中移除第 mmm 个人，并将下一个人重新从头开始报数，可以轻松解决问题。</p><p><strong>时间复杂度</strong>：对于 n 和 m 较小的情况，O(n * m) 的时间复杂度是可行的。</p><p><strong>应用范围</strong>：这种方法适用于类似的循环排列问题，理解其实现方式对于解决其他类似问题非常有帮助。</p><h2 id="五-Look-Up-S"><a href="#五-Look-Up-S" class="headerlink" title="五.Look Up S"></a>五.Look Up S</h2><h3 id="1-对应思路-4"><a href="#1-对应思路-4" class="headerlink" title="1.对应思路"></a>1.对应思路</h3><p>本题的核心在于查找每个奶牛的右侧第一个比她高的奶牛。通过使用栈（stack）数据结构，可以高效地维护一个递减的序列。每次遇到一个奶牛时，将其与栈顶的奶牛进行比较，如果栈顶奶牛的身高不大于当前奶牛，就将其弹出，直到栈顶奶牛的身高大于当前奶牛或栈为空。此时栈顶元素即为当前奶牛的仰望对象。</p><h3 id="2-代码-4"><a href="#2-代码-4" class="headerlink" title="2.代码"></a>2.代码</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int MAXN = 1e5 + 5;</span><br><span class="line">int h[MAXN];</span><br><span class="line">int ans[MAXN];</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    for (int i = 1; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; h[i];</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;int&gt; stk;</span><br><span class="line">    for (int i = n; i &gt;= 1; --i) &#123;</span><br><span class="line">        while (!stk.empty() &amp;&amp; h[stk.back()] &lt;= h[i]) &#123;</span><br><span class="line">            stk.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        ans[i] = stk.empty() ? 0 : stk.back();</span><br><span class="line">        stk.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = 1; i &lt;= n; ++i) &#123;</span><br><span class="line">        cout &lt;&lt; ans[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="3-学习总结-3"><a href="#3-学习总结-3" class="headerlink" title="3.学习总结"></a>3.学习总结</h3><p><strong>栈的应用</strong>：本题运用了栈来解决查找“右侧第一个更大元素”的问题。栈非常适合解决递增&#x2F;递减问题，能够避免不必要的重复计算。</p><p><strong>时间复杂度优化</strong>：通过栈的方式，每个奶牛的身高最多入栈和出栈一次，整体时间复杂度为 O(N)，满足大规模数据的需求。</p><p><strong>贪心策略</strong>：栈的使用体现了贪心策略，通过逐步找出最优解。每次都保证栈中的奶牛按递减顺序排列，能快速找到每个奶牛的第一个仰望对象。</p><p><strong>解决类似问题</strong>：掌握栈的应用可以解决许多类似的“寻找下一个更大&#x2F;小元素”类型的问题。</p><h2 id="五-国旗计划"><a href="#五-国旗计划" class="headerlink" title="五.国旗计划"></a>五.国旗计划</h2><h3 id="1-对应思路-5"><a href="#1-对应思路-5" class="headerlink" title="1.对应思路"></a>1.对应思路</h3><ol><li><p><strong>区间转化</strong>：</p><ul><li>每个边防战士常驻两个边防站 <code>C_i</code> 和 <code>D_i</code>，其奔袭区间为从 <code>C_i</code> 到 <code>D_i</code>。如果 <code>C_i &gt; D_i</code>，说明该区间跨越了边境，需要加上边境的总长度 <code>M</code>，这样就能确保所有区间都是线性区间，方便后续处理。</li></ul><p><strong>排序</strong>：</p><ul><li>由于区间覆盖问题通常需要按顺序处理，所有边防战士的奔袭区间按照左端点 <code>l</code> 排序。排序后的数组使得我们可以方便地逐一处理每个边防战士，并计算出最少需要多少战士来覆盖边境。</li></ul><p><strong>动态规划和跳跃法</strong>：</p><ul><li>采用动态规划来解决每个边防战士覆盖的最远区间问题。通过二分查找，找到每个战士能覆盖的最远位置，记录在二维数组 <code>go</code> 中。<code>go[i][0]</code> 存储战士 <code>i</code> 覆盖区间的最远战士 <code>k</code> 的下标。为了更高效地查询最大覆盖，代码通过多级跳跃的方式，构建了 <code>go</code> 数组，并通过动态规划实现快速查询。</li></ul><p><strong>查询最小战士数量</strong>：</p><ul><li>在查询每个战士必须参与的前提下，我们从该战士的起始位置开始，依次找到能够覆盖区间的最远战士，通过二分查找的方式迭代跳跃，最后计算出最少需要的战士数量。</li></ul><p><strong>输出结果</strong>：</p><ul><li>对于每个战士，输出必须参与的前提下，最少需要多少个战士来覆盖整个边境线。</li></ul></li></ol><h3 id="2-代码-5"><a href="#2-代码-5" class="headerlink" title="2.代码"></a>2.代码</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int n, m, res[200005];</span><br><span class="line">struct soldier &#123;</span><br><span class="line">int id, l, r;</span><br><span class="line">&#125; s[400005];</span><br><span class="line">int cmp(soldier a, soldier b)</span><br><span class="line">&#123;</span><br><span class="line">return a.l &lt; b.l; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int go[400005][20];</span><br><span class="line"></span><br><span class="line">void pre()</span><br><span class="line">&#123;</span><br><span class="line">for(int i = 1, p = i; i &lt;= 2 * n; i++) &#123;</span><br><span class="line">while(p &lt;= 2 * n &amp;&amp; s[p].l &lt;= s[i].r)</span><br><span class="line">p++;</span><br><span class="line">int pos = p - 1;</span><br><span class="line">go[i][0] = pos;</span><br><span class="line">&#125;</span><br><span class="line">for(int i = 1; i &lt; 20; i++) &#123;</span><br><span class="line">for(int j = 1; j &lt;= 2 * n; j++) &#123;</span><br><span class="line">go[j][i] = go[go[j][i - 1]][i - 1];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void search(int k)</span><br><span class="line">&#123;</span><br><span class="line">int lmt = s[k].l + m, ans = 1, p = k;</span><br><span class="line">for(int i = 19; i &gt;= 0; i--) &#123;</span><br><span class="line">if(go[k][i] != 0 &amp;&amp; s[go[k][i]].r &lt; lmt) &#123;</span><br><span class="line">ans += (1 &lt;&lt; i);</span><br><span class="line">k = go[k][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">res[s[p].id] = ans + 1;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">for(int i = 1; i &lt;= n; i++) &#123;</span><br><span class="line">cin &gt;&gt; s[i].l &gt;&gt; s[i].r;</span><br><span class="line">if(s[i].r &lt; s[i].l)</span><br><span class="line">s[i].r += m;</span><br><span class="line">s[i].id = i;</span><br><span class="line">&#125;</span><br><span class="line">sort(s + 1, s + 1 + n, cmp);</span><br><span class="line">for(int i = 1; i &lt;= n; i++) &#123;</span><br><span class="line">s[i + n] = s[i];</span><br><span class="line">s[i + n].l = s[i].l + m;</span><br><span class="line">s[i + n].r = s[i].r + m;</span><br><span class="line">&#125;</span><br><span class="line">pre();</span><br><span class="line">for(int i = 1; i &lt;= n; i++)</span><br><span class="line">search(i);</span><br><span class="line">for(int i = 1; i &lt;= n; i++)</span><br><span class="line">cout &lt;&lt; res[i] &lt;&lt; &quot; &quot;;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h3 id="学习总结-1"><a href="#学习总结-1" class="headerlink" title="学习总结"></a>学习总结</h3><p>这段代码实现了一个经典的区间覆盖问题，核心思想是通过排序和动态规划来高效地解决覆盖区间的最小边防战士数量。具体做法是将所有的区间转化成线性区间，使用排序保证覆盖的顺序性，再通过二分查找和动态规划的结合，优化查询效率。这个思路对于解决类似的区间覆盖问题非常有效，尤其是在大规模数据输入时，能够显著减少计算复杂度。通过合理使用跳跃表和二分查找，代码实现了较高的效率，是学习算法设计和优化的重要案例。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Task 2</title>
      <link href="/2025/02/06/Task-2/"/>
      <url>/2025/02/06/Task-2/</url>
      
        <content type="html"><![CDATA[<h1 id="寒假第二讲-“二分”"><a href="#寒假第二讲-“二分”" class="headerlink" title="寒假第二讲:“二分”"></a>寒假第二讲:“二分”</h1><h2 id="一-二分查找"><a href="#一-二分查找" class="headerlink" title="一.二分查找"></a>一.二分查找</h2><h3 id="1-对应思路"><a href="#1-对应思路" class="headerlink" title="1.对应思路"></a>1.对应思路</h3><p>这个问题的要求是通过二分查找，在一个已经按升序排列的整数序列中查找是否包含查询的整数。对于每次查询，若该整数在序列中出现，则输出 “Yes”，否则输出 “No”。</p><ol><li><strong>输入处理</strong>：<ul><li>输入一个整数 nnn，表示数组的大小。</li><li>接下来输入 nnn 个整数，这些整数已排序。</li><li>接着输入一个整数 qqq，表示查询次数。</li><li>对于每次查询，输入一个整数 mmm，需要判断 mmm 是否出现在排序数组中。</li></ul></li><li><strong>二分查找</strong>：<ul><li>二分查找是一种高效的查找方法，在一个已排序的数组中查找某个元素的时间复杂度为 O(log⁡n)O(\log n)O(logn)。</li><li>使用标准库的 <code>lower_bound</code> 函数来实现二分查找。它会返回一个指向数组中第一个大于或等于查询值的迭代器。如果迭代器指向的元素与查询值相同，则表示该元素存在。</li></ul></li><li><strong>输出</strong>：<ul><li>如果查询值在数组中存在，则输出 “Yes”；否则输出 “No”。</li></ul></li></ol><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;algorithm&gt;  // For lower_bound</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    </span><br><span class="line">    vector&lt;int&gt; arr(n);</span><br><span class="line">    for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int q;</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    </span><br><span class="line">    for (int i = 0; i &lt; q; ++i) &#123;</span><br><span class="line">        int m;</span><br><span class="line">        cin &gt;&gt; m;</span><br><span class="line">      </span><br><span class="line">        auto it = lower_bound(arr.begin(), arr.end(), m);</span><br><span class="line">  </span><br><span class="line">        if (it != arr.end() &amp;&amp; *it == m) &#123;</span><br><span class="line">            cout &lt;&lt; &quot;Yes&quot; &lt;&lt; endl;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            cout &lt;&lt; &quot;No&quot; &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h3 id="3-学习总结"><a href="#3-学习总结" class="headerlink" title="3.学习总结"></a>3.学习总结</h3><p>该问题要求在已排序的数组中进行多个查找操作，最直观的做法是使用二分查找。二分查找能够将查找时间从 O(n)O(n)O(n) 降低到 O(log⁡n)O(\log n)O(logn)，因此对于大规模数据，能够显著提高效率。利用 C++ STL 提供的 <code>lower_bound</code> 函数，可以高效地实现二分查找，避免手动实现查找算法。通过这种方法，每次查询的时间复杂度为 O(log⁡n)O(\log n)O(logn)，因此总的时间复杂度为 O(qlog⁡n)O(q \log n)O(qlogn)，适合处理较大规模的输入数据。</p><p>这个解法对于最大值 n&#x3D;100000n &#x3D; 100000n&#x3D;100000 和 q&#x3D;100000q &#x3D; 100000q&#x3D;100000 的情况也是可行的，满足时间限制。</p><h2 id="二-A-B数对"><a href="#二-A-B数对" class="headerlink" title="二.A-B数对"></a>二.A-B数对</h2><h3 id="1-对应思路-1"><a href="#1-对应思路-1" class="headerlink" title="1.对应思路"></a>1.对应思路</h3><p>给定数列以及常数 CCC，要求计算满足条件 A−B&#x3D;CA - B &#x3D; CA−B&#x3D;C 的数对个数。这个问题要求判断在数列中，存在多少对 (A,B)(A, B)(A,B)，使得 A−B&#x3D;CA - B &#x3D; CA−B&#x3D;C，即 A&#x3D;B+CA &#x3D; B + CA&#x3D;B+C。</p><h4 id="解决思路："><a href="#解决思路：" class="headerlink" title="解决思路："></a>解决思路：</h4><ol><li><strong>数学转换</strong>：<ul><li>给定条件 A−B&#x3D;CA - B &#x3D; CA−B&#x3D;C，可转化为 A&#x3D;B+CA &#x3D; B + CA&#x3D;B+C。因此，对于每个 BBB，我们只需要判断 B+CB + CB+C 是否出现在数列中。</li></ul></li><li><strong>使用哈希表</strong>：<ul><li>使用哈希表（<code>unordered_map</code>）来记录数列中每个数字的出现次数。遍历数列，对于每个数 BBB，计算 B+CB + CB+C，然后检查哈希表中是否有这个数。如果有，则计数增加。</li></ul></li><li><strong>效率问题</strong>：<ul><li>用哈希表统计数列中各个数字的出现次数，查找某个数是否存在的操作是 O(1)O(1)O(1)，所以该算法的时间复杂度是 O(N)O(N)O(N)，适用于大规模数据。</li></ul></li></ol><h3 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;unordered_map&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int N, C;</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; C;</span><br><span class="line">    </span><br><span class="line">    vector&lt;int&gt; arr(N);</span><br><span class="line">    unordered_map&lt;int, int&gt; freq;  </span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; N; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">        ++freq[arr[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    long long count = 0; </span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; N; ++i) &#123;</span><br><span class="line">        int B = arr[i];</span><br><span class="line">        int A = B + C;  // 计算A = B + C</span><br><span class="line">       </span><br><span class="line">        if (freq.find(A) != freq.end()) &#123;</span><br><span class="line">            count += freq[A];  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; count &lt;&lt; endl;  </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h3 id="3-学习总结-1"><a href="#3-学习总结-1" class="headerlink" title="3.学习总结"></a>3.学习总结</h3><p><strong>哈希表</strong>： 哈希表在处理需要快速查找的场景中非常有用。在本题中，哈希表帮助我们在 O(1)O(1)O(1) 的时间复杂度内查找某个元素是否存在，使得整体复杂度从 O(N2)O(N^2)O(N2) 降低到 O(N)O(N)O(N)。</p><p><strong>优化思维</strong>： 通过将问题转化为查找数列中是否存在某个数 A&#x3D;B+CA &#x3D; B + CA&#x3D;B+C，我们避免了枚举所有数对的低效方法。这是典型的通过数学转化优化问题的思路。</p><p><strong>时间与空间复杂度</strong>： 学习如何平衡时间和空间复杂度。通过使用哈希表，虽然增加了额外的空间开销，但极大地提高了算法效率，适应了问题的大数据规模。</p><p><strong>实际应用</strong>： 哈希表和集合操作在实际开发中有着广泛应用，例如数据库的索引、缓存系统等，了解并掌握这些基本数据结构对解决实际问题至关重要。</p><h2 id="三-分巧克力"><a href="#三-分巧克力" class="headerlink" title="三.分巧克力"></a>三.分巧克力</h2><h3 id="1-对应思路-2"><a href="#1-对应思路-2" class="headerlink" title="1.对应思路"></a>1.对应思路</h3><p>题目要求我们从 <code>N</code> 块巧克力中切出 <code>K</code> 块正方形巧克力，且每块正方形的边长尽可能大。我们需要通过切割巧克力的长方形，得到大小相同的正方形。</p><h4 id="问题分析："><a href="#问题分析：" class="headerlink" title="问题分析："></a>问题分析：</h4><ol><li><strong>正方形的大小</strong>：<ul><li>对于每一块巧克力 Hi×WiH_i \times W_iHi×Wi，我们能够从中切出多少个 S×SS \times SS×S 的正方形（其中 SSS 为正方形的边长）？</li><li>我们可以通过将 HiH_iHi 和 WiW_iWi 分别除以 SSS，计算每个长方形可以切出的正方形数量： 个数&#x3D;⌊HiS⌋×⌊WiS⌋\text{个数} &#x3D; \left\lfloor \frac{H_i}{S} \right\rfloor \times \left\lfloor \frac{W_i}{S} \right\rfloor个数&#x3D;⌊SHi⌋×⌊SWi⌋</li><li>我们需要找到一个 SSS，使得从所有 NNN 块巧克力中切出的正方形总数至少为 KKK。</li></ul></li><li><strong>二分查找</strong>：<ul><li>由于我们希望切出的正方形边长尽可能大，最直观的办法是使用二分查找来确定边长 SSS 的最大值。范围从 1 到每块巧克力的最大边长（即 min⁡(Hi,Wi)\min(H_i, W_i)min(Hi,Wi)）。</li></ul></li><li><strong>检查条件</strong>：<ul><li>对于每个 SSS，我们计算出所有巧克力切出的正方形数量，并判断是否能够满足至少有 KKK 块巧克力。如果能满足，说明 SSS 是一个可能的解，我们可以继续尝试更大的 SSS；否则，尝试更小的 SSS。</li></ul></li></ol><h3 id="2-代码-1"><a href="#2-代码-1" class="headerlink" title="2.代码"></a>2.代码</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">// 判断给定边长 S 能否从所有巧克力中切出至少 K 块正方形</span><br><span class="line">bool canCutSquares(const vector&lt;pair&lt;int, int&gt;&gt;&amp; chocolates, int S, int K) &#123;</span><br><span class="line">    long long totalCount = 0;  // 记录切出的正方形总数</span><br><span class="line">    for (const auto&amp; chocolate : chocolates) &#123;</span><br><span class="line">        int H = chocolate.first;</span><br><span class="line">        int W = chocolate.second;</span><br><span class="line">        totalCount += (H / S) * (W / S);  // 计算该巧克力能切出多少个 S * S 的正方形</span><br><span class="line">        if (totalCount &gt;= K) return true;  // 如果已达到要求的数量，提前返回</span><br><span class="line">    &#125;</span><br><span class="line">    return totalCount &gt;= K;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int N, K;</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; K;</span><br><span class="line"></span><br><span class="line">    vector&lt;pair&lt;int, int&gt;&gt; chocolates(N);</span><br><span class="line">    int maxSide = 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; N; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; chocolates[i].first &gt;&gt; chocolates[i].second;</span><br><span class="line">        maxSide = max(maxSide, min(chocolates[i].first, chocolates[i].second));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int low = 1, high = maxSide, bestSide = 0;</span><br><span class="line"></span><br><span class="line">    while (low &lt;= high) &#123;</span><br><span class="line">        int mid = (low + high) / 2;</span><br><span class="line">        if (canCutSquares(chocolates, mid, K)) &#123;</span><br><span class="line">            bestSide = mid;  </span><br><span class="line">            low = mid + 1;  </span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            high = mid - 1;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; bestSide &lt;&lt; endl; </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h3 id="3-学习总结-2"><a href="#3-学习总结-2" class="headerlink" title="3.学习总结"></a>3.学习总结</h3><p><strong>二分查找的应用</strong>：通过二分查找可以高效地求解正方形的最大边长，尤其是在边长空间较大时，能够显著降低时间复杂度。</p><p><strong>空间利用</strong>：通过使用哈希表和二分查找，我们在时间和空间上达到了较优的平衡，能够处理最大规模的数据。</p><p><strong>问题的数学转化</strong>：通过将切割问题转化为数目判断问题，利用二分查找可以有效避免暴力破解的高时间复杂度。</p><h2 id="四-卡牌"><a href="#四-卡牌" class="headerlink" title="四.卡牌"></a>四.卡牌</h2><h3 id="1-对应思路-3"><a href="#1-对应思路-3" class="headerlink" title="1.对应思路"></a>1.对应思路</h3><p><strong>减少重复计算</strong>：</p><ul><li>在 <code>canMakeKSets</code> 函数中，我们每次都需要计算空白卡牌的数量。考虑到 <code>a[i]</code> 和 <code>b[i]</code> 对于每个卡牌是固定的，我们可以提前计算每种卡牌的补充量，然后直接通过前缀和计算每个 <code>k</code> 的所需补充卡牌数。</li></ul><p><strong>通过前缀和优化卡牌需求计算</strong>：</p><ul><li>计算需要补充的空白卡牌数时，如果我们能提前计算出每种卡牌在每个 <code>k</code> 值下需要多少空白卡牌，可以加速查找。</li><li>我们可以使用 <strong>贪心策略</strong> 或者 <strong>扫描算法</strong>，避免每次都全量扫描 <code>n</code> 个卡牌。</li></ul><h3 id="2-代码-2"><a href="#2-代码-2" class="headerlink" title="2.代码"></a>2.代码</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define int long long</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int N = 2e5;</span><br><span class="line">int n, m, a[N + 5], b[N + 5];</span><br><span class="line"></span><br><span class="line">inline int read() &#123;</span><br><span class="line">    int x = 0;</span><br><span class="line">    bool f = 1;</span><br><span class="line">    char ch = getchar();</span><br><span class="line">    for (; ch &lt; &#x27;0&#x27; || ch &gt; &#x27;9&#x27;; ch = getchar()) f ^= (ch == &#x27;-&#x27;);</span><br><span class="line">    for (; ch &gt;= &#x27;0&#x27; &amp;&amp; ch &lt;= &#x27;9&#x27;; ch = getchar()) x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + (ch ^ 48);</span><br><span class="line">    return f ? x : -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bool check(int mid) &#123;</span><br><span class="line">    int cnt = 0;</span><br><span class="line">    for (int i = 1; i &lt;= n; ++i) &#123;</span><br><span class="line">        cnt += max(0LL, mid - a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return cnt &lt;= m;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Kafka() &#123;</span><br><span class="line">    n = read();</span><br><span class="line">    m = read();</span><br><span class="line">    </span><br><span class="line">    int L = 1, R = n * 2;</span><br><span class="line"> </span><br><span class="line">    for (int i = 1; i &lt;= n; ++i) &#123;</span><br><span class="line">        a[i] = read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    for (int i = 1; i &lt;= n; ++i) &#123;</span><br><span class="line">        b[i] = read();</span><br><span class="line">        R = min(a[i] + b[i], R);  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 二分查找最大套牌数</span><br><span class="line">    while (L &lt; R) &#123;</span><br><span class="line">        int mid = (L + R + 1) &gt;&gt; 1;</span><br><span class="line">        if (check(mid)) &#123;</span><br><span class="line">            L = mid;  </span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            R = mid - 1; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; L &lt;&lt; &#x27;\n&#x27;;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">signed main() &#123;</span><br><span class="line">    Kafka();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h3 id="3-学习总结-3"><a href="#3-学习总结-3" class="headerlink" title="3.学习总结"></a>3.学习总结</h3><p><strong>提前计算补充数量</strong>：通过一次遍历计算每个 <code>k</code> 需要的补充卡牌数量，可以减少时间复杂度，避免重复计算。</p><p><strong>二分查找的技巧</strong>：通过二分查找可以有效缩小搜索范围，每次判断可以集中判断某个 <code>k</code> 是否可行。</p><p><strong>空间优化</strong>：只使用简单的数组来存储卡牌数量和补充限制，空间复杂度为 <code>O(n)</code>，符合题目要求。</p><h2 id="五-书的复制"><a href="#五-书的复制" class="headerlink" title="五.书的复制"></a>五.书的复制</h2><h3 id="1-对应思路-4"><a href="#1-对应思路-4" class="headerlink" title="1.对应思路"></a>1.对应思路</h3><p>本题目要求将 <code>m</code> 本有顺序的书分给 <code>k</code> 个人复制，每个人抄写的书是连续的，并且需要尽可能最短的复制时间。复制时间指的是抄写页数最多的人所用的时间，目标是尽可能减少这个时间。</p><p>为了解决这个问题，采用了 <strong>二分查找</strong> 和 <strong>贪心算法</strong> 结合的策略：</p><ol><li><strong>二分查找</strong>：<ul><li>对于复制时间的最大值 <code>max_time</code>（即抄写页数最多的人的时间），我们可以进行二分查找。</li><li>初始时，设置 <code>L = 1</code>（最小值）和 <code>R = sum(a)</code>（最大值，所有书页加起来）。</li><li>对于每个中间值 <code>mid</code>，我们要判断是否能在 <code>mid</code> 的最大时间限制下，合理分配书籍给 <code>k</code> 个人。</li></ul></li><li><strong>贪心算法</strong>：<ul><li>每次尝试用当前的 <code>mid</code> 来分配书籍：从书籍列表中依次分配，如果当前人的已分配页数超过 <code>mid</code>，就开始分配给下一个人。</li><li>通过这种方式，我们可以确定在当前的 <code>mid</code> 时间下，能分配给 <code>k</code> 个人。</li></ul></li><li><strong>过程描述</strong>：<ul><li>对于每次二分查找的 <code>mid</code>，我们从第 1 个人开始，贪心地分配书籍。如果当前书籍无法分配给当前人（超出了 <code>mid</code> 时间），就换给下一个人，直到所有书籍分配完。</li><li>如果我们能够在 <code>k</code> 个人内完成分配，那么说明当前的 <code>mid</code> 值是可行的，我们尝试缩小 <code>mid</code>；否则，增大 <code>mid</code>。</li></ul></li><li><strong>结果输出</strong>：<ul><li>二分查找结束后，最终的最优时间就是 <code>L</code>，然后根据该时间输出每个人抄写的书籍区间。</li></ul></li></ol><h3 id="2-代码-3"><a href="#2-代码-3" class="headerlink" title="2.代码"></a>2.代码</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define int long long</span><br><span class="line">using namespace std;</span><br><span class="line">const int K=500;</span><br><span class="line">int m,k,a[K+5];</span><br><span class="line">int st[K+5],ed[K+5];</span><br><span class="line">inline int read()</span><br><span class="line">&#123;</span><br><span class="line">    int x=0;bool f=1;char ch=getchar();</span><br><span class="line">    for(;ch&lt;&#x27;0&#x27;||ch&gt;&#x27;9&#x27;;ch=getchar())f^=(ch==&#x27;-&#x27;);</span><br><span class="line">    for(;ch&gt;=&#x27;0&#x27;&amp;&amp;ch&lt;=&#x27;9&#x27;;ch=getchar())x=(x&lt;&lt;1)+(x&lt;&lt;3)+(ch^48);</span><br><span class="line">    return f?x:-x;</span><br><span class="line">&#125;</span><br><span class="line">bool check(int mid)</span><br><span class="line">&#123;</span><br><span class="line">    int cnt=1,now=mid;</span><br><span class="line">    for(int i=1;i&lt;=m&amp;&amp;cnt&lt;=k;++i) </span><br><span class="line">    &#123;</span><br><span class="line">        if(a[i]&gt;now) ++cnt,--i,now=mid;</span><br><span class="line">        else now-=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return cnt&lt;=k;</span><br><span class="line">&#125;</span><br><span class="line">void Kafka()</span><br><span class="line">&#123;</span><br><span class="line">    m=read(),k=read();</span><br><span class="line">    int L=1,R=0;</span><br><span class="line">    for(int i=1;i&lt;=m;++i) a[i]=read(),R+=a[i];</span><br><span class="line">    for(int mid=L+R&gt;&gt;1;L&lt;R;check(mid)?R=mid:L=mid+1)mid=L+R&gt;&gt;1;</span><br><span class="line">    ed[k]=m,st[1]=1;</span><br><span class="line">    for(int i=k,j=m,now=L;i;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        for(;now&gt;=a[j]&amp;&amp;j;--j) now-=a[j];</span><br><span class="line">        st[i]=j+1,ed[i-1]=j,now=L;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    for(int i=1;i&lt;=k;++i) cout&lt;&lt;st[i]&lt;&lt;&#x27; &#x27;&lt;&lt;ed[i]&lt;&lt;&#x27;\n&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">signed main()</span><br><span class="line">&#123;</span><br><span class="line">    Kafka();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h3 id="3-学习总结-4"><a href="#3-学习总结-4" class="headerlink" title="3.学习总结"></a>3.学习总结</h3><p>本题考察了 <strong>二分查找</strong> 和 <strong>贪心算法</strong> 的结合使用。通过二分查找高效地探索最优解空间，再结合贪心算法快速判断是否能在指定时间内完成分配，使得问题得以高效解决。这种类型的问题不仅能够加深对算法思维的理解，还能帮助解决实际中遇到的类似最优化问题。</p><h2 id="六-青蛙过河"><a href="#六-青蛙过河" class="headerlink" title="六.青蛙过河"></a>六.青蛙过河</h2><h3 id="1-对应思路-5"><a href="#1-对应思路-5" class="headerlink" title="1.对应思路"></a>1.对应思路</h3><p>题目要求小青蛙在河对岸和学校之间来回跳跃，以最小化跳跃的能力（即最小的跳跃距离）。每次小青蛙必须从一块石头起跳，并且跳跃的距离不能超过某个值。为了确保小青蛙能够完成指定的跳跃次数（2x次），我们需要找到一个合适的跳跃距离，使得它能够在有限的跳跃次数内成功完成任务。</p><ul><li><p>首先我们需要确定最小跳跃能力的范围。最小值为 <code>1</code>，最大值为 <code>n-1</code>（即河宽度），即从河的起点到终点的最大跳跃距离。</p></li><li><p>我们可以使用二分查找来缩小跳跃能力的范围。通过不断尝试不同的跳跃能力 <code>mid</code>，并判断是否能够完成 <code>2x</code> 次跳跃。</p></li><li><p>为了判断某个跳跃能力是否合适，模拟小青蛙的跳跃过程：从起点开始，每次尝试跳跃尽可能远的石头（跳跃的距离不超过当前的 <code>mid</code>），并尽量减少跳跃的次数。</p></li><li><p>如果跳跃次数小于或等于 <code>2x</code>，则当前跳跃能力 <code>mid</code> 是可行的。</p></li><li><p>否则，当前跳跃能力 <code>mid</code> 太小，不能完成任务。</p></li><li><p>通过二分查找不断调整跳跃能力的范围，直到找到最小的可行跳跃能力。</p></li></ul><h3 id="2-代码-4"><a href="#2-代码-4" class="headerlink" title="2.代码"></a>2.代码</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int N = 1e5;</span><br><span class="line">int n, x, H[N + 5], sum[N + 5];</span><br><span class="line"></span><br><span class="line">inline int read() &#123;</span><br><span class="line">    int x = 0; bool f = 1; char ch = getchar();</span><br><span class="line">    for (; ch &lt; &#x27;0&#x27; || ch &gt; &#x27;9&#x27;; ch = getchar()) f ^= (ch == &#x27;-&#x27;);</span><br><span class="line">    for (; ch &gt;= &#x27;0&#x27; &amp;&amp; ch &lt;= &#x27;9&#x27;; ch = getchar()) x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + (ch ^ 48);</span><br><span class="line">    return f ? x : -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool check(int mid) &#123;</span><br><span class="line">    int cnt = 0, last = 0;</span><br><span class="line">    for (int i = 1; i &lt; n; i++) &#123;</span><br><span class="line">        if (i - last &gt; mid) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            last = i - 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (n - last &gt; mid) cnt++;</span><br><span class="line">    return cnt &lt;= 2 * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Kafka() &#123;</span><br><span class="line">    n = read(), x = read();</span><br><span class="line">    </span><br><span class="line">    for (int i = 1; i &lt; n; i++) &#123;</span><br><span class="line">        H[i] = read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int L = 1, R = n, ans = n;</span><br><span class="line">    while (L &lt;= R) &#123;</span><br><span class="line">        int mid = (L + R) &gt;&gt; 1;</span><br><span class="line">        if (check(mid)) &#123;</span><br><span class="line">            ans = mid;</span><br><span class="line">            R = mid - 1;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            L = mid + 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; &#x27;\n&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">signed main() &#123;</span><br><span class="line">    Kafka();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h3 id="3-学习总结-5"><a href="#3-学习总结-5" class="headerlink" title="3.学习总结"></a>3.学习总结</h3><p><strong>二分查找的应用</strong><br>二分查找通常用来在有序区间中查找某个满足条件的值。在本题中，我们通过二分查找来找到最小的跳跃能力，这种问题通常被称为“最小最大化问题”。</p><p><strong>模拟问题的实现</strong><br>本题中模拟了小青蛙的跳跃过程，模拟的关键是如何判断是否能在有限的跳跃次数内完成任务。通过检查每个 <code>mid</code> 跳跃能力是否能够完成 <code>2x</code> 次跳跃，判断当前跳跃能力的可行性。</p><p><strong>问题求解中的二分查找优化</strong><br>由于本题的跳跃能力是一个整数范围，且通过验证跳跃能力的可行性可以在常数时间内完成，所以二分查找在这个问题中是一种高效的求解方法。</p><p><strong>复杂度分析</strong></p><ul><li>二分查找的时间复杂度是 <code>O(log n)</code>。</li><li>对每个 <code>mid</code> 值，我们需要遍历石头进行一次跳跃模拟，最坏情况下是 <code>O(n)</code>。</li><li>因此，总的时间复杂度是 <code>O(n log n)</code>，对于 <code>n</code> 最大为 <code>10^5</code> 的数据，能够有效地在时间限制内完成计算。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Task 1</title>
      <link href="/2025/02/06/Task-1/"/>
      <url>/2025/02/06/Task-1/</url>
      
        <content type="html"><![CDATA[<h1 id="寒假第一讲：C-基础"><a href="#寒假第一讲：C-基础" class="headerlink" title="寒假第一讲：C++ 基础"></a>寒假第一讲：C++ 基础</h1><h2 id="一-Long-Loong"><a href="#一-Long-Loong" class="headerlink" title="一.Long Loong"></a>一.Long Loong</h2><h3 id="1-对应思路"><a href="#1-对应思路" class="headerlink" title="1.对应思路"></a>1.对应思路</h3><p>思路较为简单，就是先固定输出L，再根据输入的N得到应该输出多少o，最后再固定输出ng。</p><h3 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">cout &lt;&lt; &#x27;L&#x27;;</span><br><span class="line">for (int i = 0; i &lt; n; i++)</span><br><span class="line">cout &lt;&lt; &#x27;o&#x27;;</span><br><span class="line">cout &lt;&lt; &quot;ng&quot;;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="3-学习总结"><a href="#3-学习总结" class="headerlink" title="3.学习总结"></a>3.学习总结</h3><p>学到了for循环的基本用法，对我帮助极大，受益良多。</p><h2 id="二-YES-or-YES"><a href="#二-YES-or-YES" class="headerlink" title="二.YES or YES?"></a>二.YES or YES?</h2><h3 id="1-对应思路-1"><a href="#1-对应思路-1" class="headerlink" title="1.对应思路"></a>1.对应思路</h3><p>思路就是将输入的字符串全部大写，然后判断是否等于YES，如果等于就输出YES，不等于就输出NO。</p><h3 id="2-代码-1"><a href="#2-代码-1" class="headerlink" title="2.代码"></a>2.代码</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;algorithm&gt; </span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int t; </span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    while (t--) &#123;</span><br><span class="line">        string s;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        transform(s.begin(), s.end(), s.begin(), ::toupper);</span><br><span class="line">        if (s == &quot;YES&quot;) &#123;</span><br><span class="line">            cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            cout &lt;&lt; &quot;NO&quot; &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="3-学习总结-1"><a href="#3-学习总结-1" class="headerlink" title="3.学习总结"></a>3.学习总结</h3><ol><li>字符串处理：通过 <code>transform</code> 配合 <code>tolower</code> 或 <code>toupper</code>，可以快速将字符串统一为小写或大写，便于比较。</li><li>循环与分支：利用 <code>while (t--)</code> 循环高效处理多组输入，结合 <code>if-else</code> 判断分类处理逻辑。</li><li>时间复杂度：转换大小写或比较字符串的复杂度为 O(字符串长度)O(\text{字符串长度})O(字符串长度)。整体复杂度为 O(t)O(t)O(t)，适用于测试用例较多的情况。</li><li>STL 使用：标准库函数如 <code>transform</code> 和字符串直接比较提升了代码简洁性和可靠性。</li></ol><h2 id="三-Even-Odd-G"><a href="#三-Even-Odd-G" class="headerlink" title="三.Even? Odd? G"></a>三.Even? Odd? G</h2><h3 id="1-对应思路-2"><a href="#1-对应思路-2" class="headerlink" title="1.对应思路"></a>1.对应思路</h3><p>这个程序的主要任务是根据输入的一组超大整数，判断每个整数的奇偶性（即最后一位数字是偶数还是奇数）。由于数的范围可能非常大（高达 106010^{60}1060），无法直接使用普通整数类型（如 <code>int</code> 或 <code>long long</code>），所以采用字符串处理的方式。</p><h3 id="2-代码-2"><a href="#2-代码-2" class="headerlink" title="2.代码"></a>2.代码</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">    int N;</span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line"></span><br><span class="line">    vector&lt;string&gt; results;</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; N; ++i) &#123;</span><br><span class="line">        string number;</span><br><span class="line">        cin &gt;&gt; number;</span><br><span class="line"></span><br><span class="line">        char lastDigit = number[number.length() - 1];</span><br><span class="line">        if ((lastDigit - &#x27;0&#x27;) % 2 == 0) &#123;</span><br><span class="line">            results.push_back(&quot;even&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            results.push_back(&quot;odd&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (const string&amp; result : results) &#123;</span><br><span class="line">        cout &lt;&lt; result &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="3-学习总结-2"><a href="#3-学习总结-2" class="headerlink" title="3.学习总结"></a>3.学习总结</h3><p><strong>字符串处理大数</strong>：</p><ul><li>当数字的范围超过内置类型的支持时，可以用字符串表示并处理。</li><li>判断奇偶性只需关注数字的最后一位，简化了大数的操作。</li></ul><p><strong>模运算的应用</strong>：</p><ul><li>奇偶性的本质是看数字能否被 222 整除，通过 mod  2\mod 2mod2 运算即可实现。</li></ul><h2 id="四-Problem-Generator"><a href="#四-Problem-Generator" class="headerlink" title="四.Problem Generator"></a>四.Problem Generator</h2><h3 id="1-对应思路-3"><a href="#1-对应思路-3" class="headerlink" title="1.对应思路"></a>1.对应思路</h3><ol><li>输入处理</li></ol><ul><li>读取测试用例数量 <code>t</code>。</li><li>对于每个测试用例，读取两个整数 <code>n</code>（题库题目数量）和 <code>m</code>（比赛轮次），以及一个字符串 <code>a</code> 表示题库中的题目难度。</li></ul><ol start="2"><li>统计题目数量</li></ol><ul><li>使用7个变量 <code>n1</code> 到 <code>n7</code> 分别记录每种难度（A到G）的题目数量。</li><li>遍历字符串 <code>a</code>，通过比较字符 <code>c</code> 是否为 ‘A’ 到 ‘G’ 来对每种难度的题目计数。</li></ul><ol start="3"><li>每种难度的最大需求</li></ol><ul><li>每轮比赛需要一个完整的难度级别（A到G），即每种难度最多需要 mmm 道题。</li></ul><ol start="4"><li>计算需要补充的题目数量</li></ol><ul><li><p>每轮比赛需要7种难度的题目，因此总需求为 7×m7 \times m7×m。</p></li><li><p>当前已有的题目总量为 n1+n2+⋯+n7n1 + n2 + \dots + n7n1+n2+⋯+n7。</p></li><li><p>需要补充的题目数量为： 需要补充&#x3D;max⁡(0,7×m−当前已有的题目总量)\text{需要补充} &#x3D; \max(0, 7 \times m - \text{当前已有的题目总量})需要补充&#x3D;max(0,7×m−当前已有的题目总量)</p></li><li><p>如果已有题目足够，则补充为0；否则补充缺少的题目数量。</p></li></ul><ol start="5"><li>输出结果</li></ol><ul><li>将每个测试用例的结果输出在单独的一行。</li></ul><h3 id="2-代码-3"><a href="#2-代码-3" class="headerlink" title="2.代码"></a>2.代码</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line">int main() &#123;</span><br><span class="line">    int t;</span><br><span class="line">    cin &gt;&gt; t;   </span><br><span class="line"> </span><br><span class="line">    while (t--) &#123;</span><br><span class="line">        int n, m;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        string a;</span><br><span class="line">        cin &gt;&gt; a;</span><br><span class="line">        int n1 = 0, n2 = 0, n3 = 0, n4 = 0, n5 = 0, n6 = 0, n7 = 0;</span><br><span class="line">        for (char c : a)</span><br><span class="line">        &#123;</span><br><span class="line">            if (c == &#x27;A&#x27;)</span><br><span class="line">                n1++;</span><br><span class="line">            if (c == &#x27;B&#x27;)</span><br><span class="line">                n2++;</span><br><span class="line">            if (c == &#x27;C&#x27;)</span><br><span class="line">                n3++;</span><br><span class="line">            if (c == &#x27;D&#x27;)</span><br><span class="line">                n4++;</span><br><span class="line">            if (c == &#x27;E&#x27;)</span><br><span class="line">                n5++;</span><br><span class="line">            if (c == &#x27;F&#x27;)</span><br><span class="line">                n6++;</span><br><span class="line">            if (c == &#x27;G&#x27;)</span><br><span class="line">                n7++;</span><br><span class="line">        &#125;</span><br><span class="line">        if (n1 &gt; m)</span><br><span class="line">            n1 = m;</span><br><span class="line">        if (n2 &gt; m)</span><br><span class="line">            n2 = m;</span><br><span class="line">        if (n3 &gt; m)</span><br><span class="line">            n3 = m;</span><br><span class="line">        if (n4 &gt; m)</span><br><span class="line">            n4 = m;</span><br><span class="line">        if (n5 &gt; m)</span><br><span class="line">            n5 = m;</span><br><span class="line">        if (n6 &gt; m)</span><br><span class="line">            n6 = m;</span><br><span class="line">        if (n7 &gt; m)</span><br><span class="line">            n7 = m;</span><br><span class="line">        cout &lt;&lt; max(0, 7 * m - n1 - n2 - n3 - n4 - n5 - n6 - n7) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="3-学习总结-3"><a href="#3-学习总结-3" class="headerlink" title="3.学习总结"></a>3.学习总结</h3><ul><li><p>本题通过统计每种难度题目的数量解决问题。这是字符频率统计的典型应用。</p></li><li><p>通过遍历字符串并比较字符，可以有效统计各类别出现次数。</p></li></ul><h2 id="五-rules"><a href="#五-rules" class="headerlink" title="五.rules"></a>五.rules</h2><h3 id="1-对应思路-4"><a href="#1-对应思路-4" class="headerlink" title="1.对应思路"></a>1.对应思路</h3><p>这段代码解决的问题是考察规则是否符合民意，主要步骤如下：</p><ol><li><p>输入数据：首先读取居民总数 <code>n</code>、记录天数 <code>m</code> 以及规则代号 <code>k</code>。</p></li><li><p>统计符合民意的天数：</p><p>循环 <code>m</code> 次，表示逐天处理记录。</p><p>对每一天，统计有多少居民遵守了规则 <code>k</code>（计数器 <code>c2</code>）。</p><p>如果遵守规则 <code>k</code> 的人数大于等于一半 (<code>c2 * 2 &gt;= n</code>)，则该天规则符合民意，符合民意的天数计数器 <code>c1</code> 加一。</p></li><li><p>判断规则正确性</p><p>：如果符合民意的天数大于等于记录天数的一半 (<code>c1 * 2 &gt;= m</code>)，输出 “YES” 表示规则正确，否则输出 “NO”。</p></li></ol><h3 id="2-代码-4"><a href="#2-代码-4" class="headerlink" title="2.代码"></a>2.代码</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int m, n, k;</span><br><span class="line">int c1 = 0, c2 = 0;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">for (int i = 0; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line">c2 = 0;</span><br><span class="line">for (int j = 0; j &lt; n; j++) &#123;</span><br><span class="line">int t;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line">if (t == k)</span><br><span class="line">&#123;</span><br><span class="line">c2++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">if ( c2*2 &gt;=  n)</span><br><span class="line">&#123;</span><br><span class="line">c1++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;if ( c1*2 &gt;=  m)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;YES&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">cout &lt;&lt; &quot;NO&quot;;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="3-学习总结-4"><a href="#3-学习总结-4" class="headerlink" title="3.学习总结"></a>3.学习总结</h3><p>这道题目涉及多重循环的处理，是学习数组与条件判断的重要练习。通过这段代码可以总结如下：</p><ol><li><p>理解核心逻辑</p><p>问题的核心在于两层判断：一是某天规则是否符合民意，二是统计符合民意的天数是否达到要求。这种多层嵌套条件是常见的编程模式。</p></li><li><p>优化循环效率</p><p>本代码通过双重循环按天和按人处理问题，时间复杂度为 O(m×n)O(m \times n)O(m×n)。这种结构在处理范围较大时可能需要优化。</p></li><li><p>掌握计数逻辑</p><p>使用计数器 <code>c2</code> 和 <code>c1</code> 逐步累积数据，并通过条件判断更新状态。这种逻辑清晰、简洁，适合复杂问题分步解决。</p></li></ol><h2 id="六-Many-Replacement"><a href="#六-Many-Replacement" class="headerlink" title="六.Many Replacement"></a>六.Many Replacement</h2><h3 id="1-对应思路-5"><a href="#1-对应思路-5" class="headerlink" title="1.对应思路"></a>1.对应思路</h3><ol><li><p>初始化映射表：</p><p>创建一个 <code>mapping</code> 数组，长度为 26（表示字母表），初始化为 <code>&#39;a&#39;</code> 到 <code>&#39;z&#39;</code> 的对应字母。这个表将用于记录字母替换关系。</p></li><li><p>处理替换操作：</p><p>对每个替换指令 <code>(c, d)</code>，遍历 <code>mapping</code> 数组，将所有值等于 <code>c</code> 的项替换为 <code>d</code>。</p><p>这种方式确保了间接替换链条也能正确生效。例如，如果先将 <code>a</code> 替换为 <code>b</code>，再将 <code>b</code> 替换为 <code>c</code>，最终 <code>a</code> 也会被替换为 <code>c</code>。</p></li><li><p>修改字符串：</p><p>遍历字符串 <code>S</code> 的每个字符，根据 <code>mapping</code> 数组中的映射关系，将字符替换为最终映射的目标字符。</p></li><li><p>输出结果：</p><p>输出修改后的字符串 <code>S</code>。</p></li></ol><p>通过使用 <code>mapping</code> 数组记录全局映射关系，避免直接修改字符串多次，提高了处理效率。</p><h3 id="2-代码-5"><a href="#2-代码-5" class="headerlink" title="2.代码"></a>2.代码</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int N, Q;</span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    string S;</span><br><span class="line">    cin &gt;&gt; S;</span><br><span class="line">    cin &gt;&gt; Q;</span><br><span class="line"></span><br><span class="line">    vector&lt;char&gt; mapping(26);</span><br><span class="line">    for (int i = 0; i &lt; 26; i++) &#123;</span><br><span class="line">        mapping[i] = &#x27;a&#x27; + i; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; Q; i++) &#123;</span><br><span class="line">        char c, d;</span><br><span class="line">        cin &gt;&gt; c &gt;&gt; d;</span><br><span class="line">        for (int j = 0; j &lt; 26; j++) &#123;</span><br><span class="line">            if (mapping[j] == c) &#123;</span><br><span class="line">                mapping[j] = d;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (char &amp;ch : S) &#123;</span><br><span class="line">        ch = mapping[ch - &#x27;a&#x27;]; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; S &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h3 id="3-学习总结-5"><a href="#3-学习总结-5" class="headerlink" title="3.学习总结"></a>3.学习总结</h3><p>1.高效处理替换链：</p><p>  使用一个映射表 (<code>mapping</code> 数组) 将字符替换逻辑统一管理，避免了直接在字符串中进行多次替换操作，降低了时间复杂度。</p><p>2.间接替换链的处理：</p><p>  通过在处理替换指令时遍历整个映射表，确保链式替换得到正确结果。这种方法适用于有依赖关系的替换问题。</p><p>3.复杂度优化：</p><p>  替换操作遍历 <code>mapping</code> 的复杂度为 O(Q×26)O(Q \times 26)O(Q×26)，字符串替换为 O(N)O(N)O(N)，整体复杂度约为 O(Q+N)O(Q + N)O(Q+N)，足以处理较大输入规模。</p><p>4.边界条件考虑：</p><p>  替换字符可以是相同的（<code>c = d</code>），这种情况不会影响映射表。</p><p>  某些字符可能不存在于字符串中，但替换逻辑依然可以正常处理。</p><h2 id="更好的交换"><a href="#更好的交换" class="headerlink" title="更好的交换"></a>更好的交换</h2><h3 id="1-对应思路-6"><a href="#1-对应思路-6" class="headerlink" title="1.对应思路"></a>1.对应思路</h3><ol><li><p>输入与初始化：</p><p>读取矩阵大小 <code>n</code> 和操作次数 <code>m</code>。</p><p>读取矩阵内容并存储在 <code>matrix</code> 中。</p><p>初始化两个数组 <code>row_map</code> 和 <code>col_map</code>，分别记录行和列的映射关系，初始值为 <code>[0, 1, 2, ..., n-1]</code>。</p></li><li><p>操作处理：</p><p>遍历每个操作，根据操作类型：</p><p>  若 <code>op == 1</code>（交换行），则交换 <code>row_map[x]</code> 和 <code>row_map[y]</code>。</p><p>  若 <code>op == 0</code>（交换列），则交换 <code>col_map[x]</code> 和 <code>col_map[y]</code>。</p><p>通过修改 <code>row_map</code> 和 <code>col_map</code> 的映射关系，而非直接修改矩阵，节省了时间复杂度。</p></li><li><p>输出矩阵：</p><p>根据最终的 <code>row_map</code> 和 <code>col_map</code>，重新按映射顺序输出矩阵。<code>matrix[row_map[i]][col_map[j]]</code> 得到正确的映射值。</p></li></ol><p>通过这种间接映射法，避免了每次交换直接操作矩阵，提高了效率，适合大规模输入。</p><h3 id="2-代码-6"><a href="#2-代码-6" class="headerlink" title="2.代码"></a>2.代码</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; matrix(n, vector&lt;int&gt;(n));</span><br><span class="line">    for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class="line">        for (int j = 0; j &lt; n; ++j) &#123;</span><br><span class="line">            cin &gt;&gt; matrix[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;int&gt; row_map(n), col_map(n);</span><br><span class="line">    for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class="line">        row_map[i] = i; </span><br><span class="line">        col_map[i] = i; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; m; ++i) &#123;</span><br><span class="line">        int op, x, y;</span><br><span class="line">        cin &gt;&gt; op &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        --x; </span><br><span class="line">        --y;</span><br><span class="line">        if (op == 1) &#123;</span><br><span class="line">            swap(row_map[x], row_map[y]); </span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            swap(col_map[x], col_map[y]); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class="line">        for (int j = 0; j &lt; n; ++j) &#123;</span><br><span class="line">            cout &lt;&lt; matrix[row_map[i]][col_map[j]] &lt;&lt; &quot; &quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="3-学习总结-6"><a href="#3-学习总结-6" class="headerlink" title="3.学习总结"></a>3.学习总结</h3><p>间接映射优化：</p><p>​    直接交换矩阵行列会带来高昂的时间复杂度，间接通过映射数组调整顺序是一种高效的解决方式。</p><p>空间与时间的平衡：</p><p>​    增加两个映射数组 <code>row_map</code> 和 <code>col_map</code>，用空间换取了时间的优化。</p><p>​    在 mmm 次操作和 n2n^2n2 次矩阵访问中，复杂度降低为 O(n2+m)O(n^2 + m)O(n2+m)，适合处理大规模 n,mn, mn,m。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>blog用法</title>
      <link href="/2025/02/06/blog%E7%94%A8%E6%B3%95/"/>
      <url>/2025/02/06/blog%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="提交更改"><a href="#提交更改" class="headerlink" title="提交更改"></a>提交更改</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><h1 id="本地网站"><a href="#本地网站" class="headerlink" title="本地网站"></a>本地网站</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/02/06/hello-world/"/>
      <url>/2025/02/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div><p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div><p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div><p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div><p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
  
</search>
